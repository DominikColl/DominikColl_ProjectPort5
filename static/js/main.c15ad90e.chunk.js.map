{"version":3,"sources":["Components/Button.js","Components/form.js","Components/albumItem.js","Components/songItem.js","Components/artistItem.js","Components/header.js","Page/Home.js","Page/MoreInfo.js","Page/Code.js","Components/AlbumDetail.js","Components/SongDetail.js","Components/ArtistDetail.js","Components/Routes.js","App.js","serviceWorker.js","index.js"],"names":["Button","props","id","type","onClick","style","styles","button","string","padding","form","onSubmit","click","filter","placeholder","className","btnClick","albumItem","src","img","alt","to","albumName","artist","artistItem","songName","artistName","plays","name","followers","header","Home","state","search","other","collection","topTracks","current","bigCollection","fetchTopTracks","console","log","document","querySelector","value","setState","fetchAlbum","fetchArtist","fetchSong","swal","icon","text","push","e","target","artistClick","homeClick","fetch","res","json","data","results","i","albummatches","album","this","trackmatches","track","artistmatches","tracks","fillContent","map","mbid","key","image","listeners","url","Component","MoreInfo","loadArtistDetail","a","loadAlbumDetail","loadSongDetail","AlbumDetail","albumId","useParams","useState","wiki","albumData","setAlbumData","setArtist","playCount","setPlayCount","published","setPublished","summary","setSummary","setTracks","albumImg","setAlbumImg","useEffect","then","d","playcount","fillTracks","parseFloat","toLocaleString","SongDetail","songId","songData","setSongData","setArtistName","albumTitle","setAlbumTitle","songBio","setSongBio","songImg","setSongImg","title","artistId","bio","setBio","similarArt","setSimilarArt","pic","setPic","stats","similar","fillSimilarArt","Routes","exact","path","component","ArtistDetail","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c15ad90e.chunk.js","sourcesContent":["import React from 'react';\nimport './style.css'\nconst Button = props => {\n    return (<button id='searchBut' type='button' onClick={props.onClick} style={styles.button}>{props.string}</button>);\n}\nexport default Button;\nconst styles = {\n    button: {\n        padding: '.9rem',\n    }\n}","import React from 'react';\nimport Button from './Button';\nimport { FaSearch } from \"react-icons/fa\";\nimport './style.css';\nconst form = props => {\n    return (\n        <div>\n            <form onSubmit={props.click}>\n                <div id='fDiv'>\n                    {/* update to deploy */}\n                    {/* <h2>Search</h2> */}\n                    {/* changes based off of state */}\n                    <h2>Filtering: {props.filter}</h2>\n                    <input type='text' placeholder='Search your favorite songs,albums, or artist'></input>\n                    {/* hide this input so form submits when user hits enter */}\n                    <input id='hideThis' type='submit' />\n                    <Button string={<FaSearch />} onClick={props.click} />\n                </div>\n                <h2>Choose filter for search</h2>\n                <ul id='formButCon'>\n                    {/* passing onClick event to be placed in page */}\n                    {/* using id as identifier in js */}\n                    <li><button className='formBut' onClick={props.btnClick} type='button' id='Artist'>Artist</button></li>\n                    <li><button className='formBut' onClick={props.btnClick} type='button' id='Song'>Song</button></li>\n                    <li><button className='formBut' onClick={props.btnClick} type='button' id='Album'>Album</button></li>\n                </ul>\n            </form>\n        </div>\n    );\n}\n\nexport default form;","import React from 'react';\nimport './style.css';\nimport { Link } from 'react-router-dom'\n\nconst albumItem = props => {\n        return (\n                <div>\n                        <li><img src={props.img} alt='Album Img' /></li>\n\n                        <li className='item'>\n                                <Link className='link' to={\"/album/\" + props.id}>\n                                        Album Name: {props.albumName}\n                                </Link>\n                        </li>\n                        <li className='item'>Artist Name: {props.artist}</li>\n\n                        {/* <li className='item' id='itemUrl'>\n                                More info:{props.url}\n                        </li> */}\n\n                </div>\n        );\n}\n\nexport default albumItem;","import React from 'react';\nimport './style.css';\nimport { Link } from 'react-router-dom';\nconst artistItem = props => {\n        return (\n                <div>\n                        <li><img src={props.img} alt='Song Img' /></li>\n                        <li>\n                                <Link className='link' to={\"/song/\" + props.id}>\n                                        Song Name:{props.songName}\n                                </Link>\n                        </li>\n                        <li className='item'>Artist Name:{props.artistName}</li>\n                        <li className='item'>Plays:{props.plays}</li>\n                        {/* <li className='item'>More info:{props.url}</li> */}\n\n                </div>\n        );\n}\n\nexport default artistItem;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst artistItem = props => {\n        return (\n                <div>\n                        <li><img src={props.img} alt='Artist Img' /></li>\n                        <li>\n                                <Link className='link' to={\"/artist/\" + props.id}>\n                                        Artist Name:{props.name}\n                                </Link>\n                        </li>\n                        <li className='item' id='artistItem'>Followers:{props.followers}</li>\n                        {/* <li className='item' id='artistItem'>More Info:{props.url}</li> */}\n                </div>\n        );\n}\n\nexport default artistItem;","import React from 'react';\nimport { MdSpeaker } from \"react-icons/md\";\nimport './style.css';\nimport { NavLink } from 'react-router-dom';\n\nconst header = props => {\n    return (\n        <nav id=\"nav\">\n            <h1 id='logo'> <NavLink to='/'> <MdSpeaker onClick={props.click} /></NavLink></h1>\n        </nav>\n    );\n}\nexport default header;","import React, { Component } from 'react';\nimport Form from '../Components/form';\nimport AlbumItem from '../Components/albumItem';\nimport SongItem from '../Components/songItem';\nimport ArtistItem from '../Components/artistItem';\nimport Header from '../Components/header';\nimport '../Components/style.css';\n//modal lib\nimport swal from 'sweetalert';\n\n//project built using livefm api and spotify/youtube playback\n// Reacticons used and css Reset came from http://meyerweb.com/eric/tools/css/reset/ \nclass Home extends Component {\n  //state \n  state = { search: '', name: 'name', other: 'other', filter: 'Album', collection: [], topTracks: [], current: [], bigCollection: [] }\n  //happens when all compents load in\n  componentDidMount() {\n    // this.fetchTopTracks();\n    console.log('test f');\n  }\n\n  //fetchs album based of search value\n  async fetchAlbum(value) {\n    //collection to be set to state later in fucntion\n    let collection = [];\n\n    console.log(value);\n    //removed http for cors issue github pages\n    const res = await fetch(`//ws.audioscrobbler.com/2.0/?method=album.search&album=${value}&api_key=77730a79e57e200de8fac0acd06a6bb6&format=json`)\n    const data = await res.json()\n    //if data results exist\n    if (data.results) {\n      //this is gonna be a problem\n      for (let i = 0; i < 9; i++) {\n        collection.push(data.results.albummatches.album[i]);\n      }\n      //collection=data.results.albummatches.album;\n      console.log(collection);\n      //setting state\n      this.setState({ collection });\n      console.log('exist');\n      console.log(data.results.albummatches.album[0]);\n      return collection;\n\n    }\n  }\n  //fetchs song based of search value\n  async fetchSong(value) {\n    let collection = [];\n    const res = await fetch(`//ws.audioscrobbler.com/2.0/?method=track.search&track=${value}&api_key=77730a79e57e200de8fac0acd06a6bb6&format=json`)\n    const data = await res.json()\n    console.log(data);\n    if (data.results) {\n      for (let i = 0; i < 20; i++) {\n        collection.push(data.results.trackmatches.track[i]);\n      }\n      console.log(collection);\n      this.setState({ collection });\n      return collection;\n    }\n  }\n  //fetchs artist based on search value\n  async fetchArtist(value) {\n    let collection = [];\n\n    const res = await fetch(`//ws.audioscrobbler.com/2.0/?method=artist.search&artist=${value}&api_key=77730a79e57e200de8fac0acd06a6bb6&format=json`)\n    const data = await res.json()\n    console.log(data);\n    if (data.results) {\n      for (let i = 0; i < 9; i++) {\n        collection.push(data.results.artistmatches.artist[i]);\n      }\n      console.log(collection);\n      this.setState({ collection });\n      return collection;\n    }\n  }\n  //fetchs most popular artist\n  async fetchTopArtist() {\n    const res = await fetch(`//ws.audioscrobbler.com/2.0/?method=chart.gettopartists&api_key=77730a79e57e200de8fac0acd06a6bb6&format=json`)\n    const data = await res.json()\n    console.log(data);\n  }\n  //fetchs most popular tracks\n  async fetchTopTracks() {\n    let topTracks = [];\n    const res = await fetch(`//ws.audioscrobbler.com/2.0/?method=chart.gettoptracks&api_key=77730a79e57e200de8fac0acd06a6bb6&format=json`)\n    const data = await res.json()\n    // console.log(data);\n    for (let i = 0; i < 9; i++) {\n      topTracks.push(data.tracks.track[i]);\n    }\n    console.log('from top charts collection');\n    //  console.log(collection)\n    this.setState({ topTracks });\n    // return collection;\n  }\n\n  //click function that will happen when form is submitted\n  //checks filter if fetching song artist or album the triggers fucntion to fetch data\n  click = () => {\n    this.fetchTopTracks();\n    console.log(this.state.filter);\n    //grabbing input value \n    let search = document.querySelector('input').value;\n    this.setState({ search });\n    //checking filter/button pressed\n    if (this.state.filter === 'Album') {\n      this.fetchAlbum(search);\n    } else if (this.state.filter === 'Artist') {\n      this.fetchArtist(search);\n    } else if (this.state.filter === 'Song') {\n      this.fetchSong(search);\n      //if filter is not set run all three and return value into big Collection\n    } else if (this.state.filter === '') {\n      // modal popup if filter is not selected\n      swal({ icon: 'warning', text: \"To use the app to its full potential choose a filter\" });\n      let bigCollection = [];\n      bigCollection.push(this.fetchAlbum(search));\n      bigCollection.push(this.fetchArtist(search));\n      bigCollection.push(this.fetchSong(search));\n      this.setState({ bigCollection })\n    }\n  }\n  //happens when filter button is clicked will be set using id of button clicked\n  btnClick = (e) => {\n    let filter = e.target.id;\n    this.setState({ filter });\n    console.log(filter);\n  }\n  //I CANT GET VALUE INSIDE OF LI OR ANYTHING NEEDED FROM TARGETING A COMPENTNT\n  artistClick = (e) => {\n    console.log(e.target.id);\n\n    //artistClickk();\n  }\n\n  //  returns home and clears input fields when escape hatch is clicked\n  homeClick = () => {\n    let collection = [];\n    document.querySelector('input').value = '';\n    this.setState({ collection });\n  }\n\n  render() {\n    //filling content based off what the filter is getting data from collection in state set when fetching data \n    let fillContent = this.state.collection.map((e, i) => {\n      console.log(e);\n      //checking filter and only displaying items with a mbid \n      if (this.state.filter === 'Artist') {\n        if (e.mbid) {\n          // calling component based on search filter\n          return <ArtistItem key={i} id={e.mbid} click={this.artistClick} img={e.image[2]['#text']} name={e.name} followers={e.listeners} url={e.url} />\n        }\n      } else if (this.state.filter === 'Album') {\n        if (e.mbid) {\n          return <AlbumItem key={i} id={e.mbid} img={e.image[2]['#text']} albumName={e.name} artist={e.artist} url={e.url} />\n        }\n      } else if (this.state.filter === 'Song') {\n        if (e.mbid) {\n          return <SongItem key={i} img={e.image[2]['#text']} id={e.mbid} songName={e.name} artistName={e.artist} plays={e.listeners} url={e.url} />\n        }\n      } else if (this.state.filter === '') {\n        console.log(e);\n        // if no filter return what is returned by all three\n        return <div key={i}><img src={e.image[2]['#text']} alt='Search related img' /><li>{e.name}</li> <li>{e.artist}</li></div>\n      }\n      return '';\n    })\n    return (\n      <div>\n        {/* calling imported component setting props */}\n        <Header click={this.homeClick} />\n        <Form btnClick={this.btnClick} filter={this.state.filter} click={this.click} />\n        {/* {modal} */}\n        <ul id='listCon'>\n          {/* calling function to map through collection*/}\n          {fillContent}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default Home;","import React, { Component } from 'react';\n\n// once user clicks on searched item this route will go\nclass MoreInfo extends Component {\n    state = {  }\n    componentDidMount() {\n    \n      }\n    render() { \n        return ( <h1>More Info</h1> );\n    }\n}\n \nexport default MoreInfo;","//export to export functions\n\n// export so it can be used in home \nexport const artistClickk = async (artist) => {\n    console.log('from infoArtist');\n    ///2.0/?method=artist.getinfo&artist=Cher&api_key=77730a79e57e200de8fac0acd06a6bb6&format=json\n    const res = await fetch(`http://ws.audioscrobbler.com/2.0/?method=artist.getinfo&artist=${artist}&api_key=77730a79e57e200de8fac0acd06a6bb6&format=json`)\n    const data = await res.json();\n    //if data results exist\n    let r = await data;\n    console.log(r);\n}\nexport const loadArtistDetail = async (mbid) => {\n    // let albumArray = [];\n    const res = await fetch(`//ws.audioscrobbler.com/2.0/?method=artist.getinfo&mbid=${mbid}&api_key=77730a79e57e200de8fac0acd06a6bb6&format=json`)\n    const data = await res.json();\n    return await data;\n}\nexport const loadAlbumDetail = async (mbid) => {\n    // let albumArray = [];\n    const res = await fetch(`//ws.audioscrobbler.com/2.0/?method=album.getinfo&mbid=${mbid}&api_key=77730a79e57e200de8fac0acd06a6bb6&format=json`)\n    const data = await res.json();\n    return await data;\n}\n///2.0/?method=user.getinfo&user=rj&api_key=YOUR_API_KEY&format=json\nexport const loadSongDetail = async (mbid) => {\n    // let albumArray = [];\n    const res = await fetch(`//ws.audioscrobbler.com/2.0/?method=track.getInfo&mbid=${mbid}&api_key=77730a79e57e200de8fac0acd06a6bb6&format=json`)\n    const data = await res.json();\n    return await data;\n}","import React, { useEffect, useState } from 'react'\nimport { useParams } from 'react-router-dom'\nimport { loadAlbumDetail } from '../Page/Code'\nimport './style.css';\nimport Header from './header';\nconst AlbumDetail = () => {\n  //states\n  let { albumId } = useParams();\n  //artist playcount published summary tracksonalbum\n  let [albumData, setAlbumData] = useState({ wiki: {} })\n  let [artist, setArtist] = useState('')\n  let [playCount, setPlayCount] = useState('')\n  let [published, setPublished] = useState('')\n  let [summary, setSummary] = useState('')\n  let [tracks, setTracks] = useState([])\n  let [albumImg, setAlbumImg] = useState([])\n\n  useEffect(() => {\n    console.log(albumId);\n    loadAlbumDetail(albumId).then((d) => {\n      //getting data setting states\n      setAlbumData(d.album);\n      setArtist(d.album.artist);\n      setPlayCount(d.album.playcount);\n      if (d.album.wiki) {\n        setPublished(d.album.wiki.published);\n        setSummary(d.album.wiki.summary);\n      }\n      setTracks(d.album.tracks.track);\n      setAlbumImg(d.album.image[3]['#text']);\n      console.log(d.album);\n    })\n  }, [albumId])\n\n  //looping through tracks on album to display\n  let fillTracks = tracks.map((e, i) => {\n    return <li key={i}> {e.name}</li>;\n  })\n  return (\n\n    <div className='moreDetail'>\n      {/* {console.log(albumData.wiki.published)} */}\n      <Header />\n      {/* <h1>I am Album Detail.</h1>\n      <p>{albumId}</p> */}\n      <ul className='detailList'>\n        <div className='imgCon'>\n          <img src={albumImg} alt='Album Img' />\n          <li><h1>{albumData.name}</h1></li>\n        </div>\n        <li><h2>By {artist}</h2></li>\n        {/* toLocaleString will format long numbers to make them readable very cool */}\n        <li><h2>Plays</h2> {parseFloat(playCount).toLocaleString('en')}</li>\n        <li><h2>Release Date</h2> {published}</li>\n        <li className='bio'> {summary}</li>\n        <h2>Tracks</h2>\n        {fillTracks}\n      </ul>\n    </div>\n  )\n}\n\nexport default AlbumDetail","import React, { useEffect, useState } from 'react'\nimport { useParams } from 'react-router-dom'\nimport { loadSongDetail } from '../Page/Code'\nimport './style.css';\nimport Header from './header'\n\nconst SongDetail = (props) => {\n\n    let { songId } = useParams();\n\n    let [songData, setSongData] = useState([])\n    let [artistName, setArtistName] = useState('');\n    let [albumTitle, setAlbumTitle] = useState('');\n    let [playCount, setPlayCount] = useState('');\n    let [songBio, setSongBio] = useState('');\n    let [songImg, setSongImg] = useState('');\n    useEffect(() => {\n        console.log(songId);\n        loadSongDetail(songId).then((d) => {\n            //setting states\n            console.log(d.track);\n            setSongData(d.track);\n            setSongImg(d.track.album.image[2]['#text']);\n            setArtistName(d.track.artist.name);\n            setAlbumTitle(d.track.album.title);\n            setPlayCount(d.track.playcount);\n            if (d.track.wiki) {\n                setSongBio(d.track.wiki.summary);\n            }\n            console.log(d.track.artist.name);\n        }).then((e) => {\n            console.log(songData);\n        })\n        // add song data to get rid of warning at the cost of a infnite loop making fetch calls\n    }, [songId])\n    return (\n        <div className='moreDetail'>\n            <Header />\n            {/* <h1>I am Album Detail.</h1>\n            <p>{songId}</p> */}\n            <ul className='detailList'>\n                <div className='imgCon'>\n                    <img src={songImg} alt='Song Img' />\n                    <li><h1>{songData.name}</h1></li>\n                </div>\n                <li><h2>By {artistName}</h2></li>\n                <li><h2>Album Title: {albumTitle}</h2></li>\n                <li><h2>Play Count:</h2> {parseFloat(playCount).toLocaleString('en')}</li>\n                <li className='bio'>Summary: {songBio}</li>\n            </ul>\n        </div>\n    )\n}\n\nexport default SongDetail","import React, { useEffect, useState } from 'react'\nimport { useParams } from 'react-router-dom'\nimport { loadArtistDetail } from '../Page/Code'\nimport './style.css';\nimport Header from './header';\n\nconst SongDetail = (props) => {\n\n    let { artistId } = useParams();\n    //name bio.summary stats.playcount similar.artist[]\n\n    let [artistName, setArtistName] = useState('');\n    let [bio, setBio] = useState('');\n    let [playCount, setPlayCount] = useState('');\n    let [similarArt, setSimilarArt] = useState([]);\n    let [pic, setPic] = useState('');\n    useEffect(() => {\n        console.log(artistId);\n        loadArtistDetail(artistId).then((d) => {\n            //setting states\n            setArtistName(d.artist.name);\n            setBio(d.artist.bio.summary);\n            setPlayCount(d.artist.stats.playcount);\n            setSimilarArt(d.artist.similar.artist);\n            setPic(d.artist.image[2]['#text']);\n            console.log(d.artist.image[2]['text'])\n        })\n    }, [artistId])\n    //looping throught similar artists to dispaly later\n    let fillSimilarArt = similarArt.map((e, i) => {\n        return <li key={i}>{e.name}</li>\n    })\n\n    return (\n        <div className='moreDetail'>\n            <Header />\n            {/* <h1>I am Album Detail.</h1>\n            <p>{artistId}</p> */}\n            <ul className='detailList'>\n                <div className='imgCon'>\n                    <img src={pic} alt='Artist img' />\n                    <li><h1>{artistName}</h1></li>\n                </div>\n                <li className='bio'>{bio}</li>\n                {/* parses float to a readable number with commas */}\n                <li><h2>Plays:</h2> {parseFloat(playCount).toLocaleString('en')}</li>\n                <h2>Similar Artist</h2>\n                {fillSimilarArt}\n            </ul>\n        </div>\n    )\n}\n\nexport default SongDetail","import React, { Component } from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Home from '../Page/Home';\nimport MoreInfo from '../Page/MoreInfo';\nimport AlbumDetail from './AlbumDetail';\nimport SongDetail from './SongDetail';\nimport ArtistDetail from './ArtistDetail';\nclass Routes extends Component {\n    render() {\n        return (<div>\n            <Switch>\n                {/* Will go straight to Home component */}\n                <Route exact path='/' component={Home} />\n                <Route exact path='/Home' component={Home} />\n                <Route exact path='/MoreInfo' component={MoreInfo} />\n                <Route exact path='/album/:albumId' component={AlbumDetail} />\n                <Route exact path='/song/:songId' component={SongDetail} />\n                <Route exact path='/artist/:artistId' component={ArtistDetail} />\n            </Switch>\n        </div>);\n    }\n}\nexport default Routes;","import React from 'react';\nimport './App.css';\nimport Routes from './Components/Routes';\nimport { HashRouter as Router } from 'react-router-dom';\n\nfunction App() {\n\n  return (\n    <Router>\n\n      <div className=\"App\">\n        <Routes />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}